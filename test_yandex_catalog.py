#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Yandex Cloud
"""

import os
import requests
import json

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['YANDEX_API_KEY'] = 'AQVN18PYvPyNkfObkh7O9EWgcpXZzG47AEOc0lnU'
os.environ['YANDEX_FOLDER_ID'] = 'b1gvsm0staqq3jcivgl5'

def test_catalog_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∞"""
    api_key = os.getenv('YANDEX_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É:")
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–∞–ª–æ–≥–µ
    url = f"https://resource-manager.api.cloud.yandex.net/resource-manager/v1/folders/{folder_id}"
    
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {result.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        elif response.status_code == 403:
            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É (403)")
        elif response.status_code == 404:
            print(f"‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É: {e}")
    
    print()

def test_service_accounts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    api_key = os.getenv('YANDEX_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º:")
    
    url = f"https://iam.api.cloud.yandex.net/iam/v1/serviceAccounts"
    
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }
    
    params = {
        "folderId": folder_id
    }
    
    try:
        response = requests.get(url, headers=headers, params=params, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            accounts = result.get('serviceAccounts', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
            
            for account in accounts:
                print(f"   - {account.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {account.get('id', '–ù–µ—Ç ID')})")
                
        elif response.status_code == 403:
            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º (403)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º: {e}")
    
    print()

def test_iam_roles():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–ª—è–º IAM"""
    api_key = os.getenv('YANDEX_API_KEY')
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–ª—è–º IAM:")
    
    url = "https://iam.api.cloud.yandex.net/iam/v1/roles"
    
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            roles = result.get('roles', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–æ–ª–µ–π: {len(roles)}")
            
            # –ò—â–µ–º —Ä–æ–ª—å –¥–ª—è YandexGPT
            ai_roles = [role for role in roles if 'ai' in role.get('id', '').lower() or 'language' in role.get('id', '').lower()]
            
            if ai_roles:
                print("   –†–æ–ª–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å AI:")
                for role in ai_roles:
                    print(f"   - {role.get('id', '–ù–µ—Ç ID')}: {role.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            else:
                print("   –†–æ–ª–∏ –¥–ª—è AI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        elif response.status_code == 403:
            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–ª—è–º IAM (403)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ä–æ–ª—è–º IAM: {e}")
    
    print()

def test_operation_log():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π"""
    api_key = os.getenv('YANDEX_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:")
    
    url = f"https://operation.api.cloud.yandex.net/operations"
    
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }
    
    params = {
        "folderId": folder_id,
        "pageSize": 5
    }
    
    try:
        response = requests.get(url, headers=headers, params=params, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            operations = result.get('operations', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(operations)}")
            
            for op in operations:
                print(f"   - {op.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')} (—Å—Ç–∞—Ç—É—Å: {op.get('done', False)})")
                
        elif response.status_code == 403:
            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π (403)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ª–æ–≥–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º Yandex Cloud")
    print("=" * 60)
    
    test_catalog_access()
    test_service_accounts()
    test_iam_roles()
    test_operation_log()
    
    print("üìã –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("1. –ï—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥")
    print("2. –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ IAM")
    print("3. –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("4. –ï—Å–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ YandexGPT –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª—å—é")

if __name__ == "__main__":
    main() 
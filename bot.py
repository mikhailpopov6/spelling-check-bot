import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN
from llm_service import LLMService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TextBot:
    def __init__(self):
        self.llm_service = LLMService()
        self.user_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
‚úÖ –£–ª—É—á—à–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞  
‚úÖ –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–º—ã—Å–ª–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
        """
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", callback_data="check_grammar")],
            [InlineKeyboardButton("‚ú® –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="improve_text")],
            [InlineKeyboardButton("üìÑ –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="shorten_text")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**

1Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å** - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞

2Ô∏è‚É£ **–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç** - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∞–µ—Ç —Å—Ç–∏–ª—å, –¥–µ–ª–∞—è —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º

3Ô∏è‚É£ **–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç** - —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å
/improve - –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç  
/shorten - –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 4000 —Å–∏–º–≤–æ–ª–æ–≤
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def check_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
        user_id = update.effective_user.id
        self.user_states[user_id] = "waiting_for_text_check"
        await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:")
    
    async def improve_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /improve"""
        user_id = update.effective_user.id
        self.user_states[user_id] = "waiting_for_text_improve"
        await update.message.reply_text("‚ú® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
    
    async def shorten_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shorten"""
        user_id = update.effective_user.id
        self.user_states[user_id] = "waiting_for_text_shorten"
        await update.message.reply_text("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è:")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "check_grammar":
            self.user_states[user_id] = "waiting_for_text_check"
            await query.edit_message_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:")
        
        elif query.data == "improve_text":
            self.user_states[user_id] = "waiting_for_text_improve"
            await query.edit_message_text("‚ú® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
        
        elif query.data == "shorten_text":
            self.user_states[user_id] = "waiting_for_text_shorten"
            await query.edit_message_text("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è:")
        
        elif query.data == "help":
            help_text = """
üìö **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**

1Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å** - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞

2Ô∏è‚É£ **–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç** - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∞–µ—Ç —Å—Ç–∏–ª—å, –¥–µ–ª–∞—è —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º

3Ô∏è‚É£ **–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç** - —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å
/improve - –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç  
/shorten - –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 4000 —Å–∏–º–≤–æ–ª–æ–≤
            """
            await query.edit_message_text(help_text, parse_mode='Markdown')
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if user_id not in self.user_states:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.start(update, context)
            return
        
        state = self.user_states[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
        
        try:
            if state == "waiting_for_text_check":
                result = await self.llm_service.check_grammar(text)
                await processing_msg.edit_text(f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:**\n\n{result}", parse_mode='Markdown')
            
            elif state == "waiting_for_text_improve":
                result = await self.llm_service.improve_text(text)
                await processing_msg.edit_text(f"‚ú® **–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{result}", parse_mode='Markdown')
            
            elif state == "waiting_for_text_shorten":
                result = await self.llm_service.shorten_text(text)
                await processing_msg.edit_text(f"üìÑ **–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{result}", parse_mode='Markdown')
        
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                del self.user_states[user_id]
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = TextBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("check", bot.check_command))
    application.add_handler(CommandHandler("improve", bot.improve_command))
    application.add_handler(CommandHandler("shorten", bot.shorten_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 
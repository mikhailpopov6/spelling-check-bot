#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å YandexGPT API
"""

import os
import requests
import json

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['YANDEX_API_KEY'] = 'AQVN18PYvPyNkfObkh7O9EWgcpXZzG47AEOc0lnU'
os.environ['YANDEX_FOLDER_ID'] = 'b1gvsm0staqq3jcivgl5'

def test_api_key_format():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞"""
    api_key = os.getenv('YANDEX_API_KEY')
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API –∫–ª—é—á–∞:")
    print(f"–î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {api_key[:10]}...")
    print(f"–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞: ...{api_key[-10:]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å AQVN (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Yandex Cloud)
    if api_key.startswith('AQVN'):
        print("‚úÖ –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å AQVN)")
    else:
        print("‚ùå –ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞")
    print()

def test_folder_id():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç Folder ID"""
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Folder ID:")
    print(f"Folder ID: {folder_id}")
    print(f"–î–ª–∏–Ω–∞: {len(folder_id)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (–æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å b1g)
    if folder_id.startswith('b1g'):
        print("‚úÖ –§–æ—Ä–º–∞—Ç Folder ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å b1g)")
    else:
        print("‚ùå –ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Folder ID")
    print()

def test_different_auth_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    api_key = os.getenv('YANDEX_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
    print("1Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    headers1 = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }
    test_request(headers1, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Api-Key")
    
    # –¢–µ—Å—Ç 2: Bearer —Ç–æ–∫–µ–Ω
    print("2Ô∏è‚É£ –¢–µ—Å—Ç Bearer —Ç–æ–∫–µ–Ω–∞:")
    headers2 = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    test_request(headers2, "Bearer —Ç–æ–∫–µ–Ω")
    
    # –¢–µ—Å—Ç 3: –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    print("3Ô∏è‚É£ –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞:")
    headers3 = {
        "Authorization": api_key,
        "Content-Type": "application/json"
    }
    test_request(headers3, "–ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞")

def test_request(headers, method_name):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    
    payload = {
        "modelUri": f"gpt://{os.getenv('YANDEX_FOLDER_ID')}/yandexgpt-lite",
        "completionOptions": {
            "temperature": 0.3,
            "maxTokens": 50
        },
        "messages": [
            {
                "role": "user",
                "text": "–ü—Ä–∏–≤–µ—Ç"
            }
        ]
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        
        if response.status_code == 200:
            print(f"   ‚úÖ {method_name} - –†–ê–ë–û–¢–ê–ï–¢!")
            result = response.json()
            if "result" in result and "alternatives" in result["result"]:
                text = result["result"]["alternatives"][0]["message"]["text"]
                print(f"   –û—Ç–≤–µ—Ç: {text}")
        elif response.status_code == 403:
            print(f"   ‚ùå {method_name} - Permission denied")
        elif response.status_code == 401:
            print(f"   ‚ùå {method_name} - Unauthorized")
        else:
            print(f"   ‚ùå {method_name} - Error {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå {method_name} - Exception: {e}")

def test_different_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    api_key = os.getenv('YANDEX_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
    
    models = [
        "yandexgpt-lite",
        "yandexgpt",
        "yandexgpt-lite:latest",
        "yandexgpt:latest"
    ]
    
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }
    
    for model in models:
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥–µ–ª—å: {model}")
        
        payload = {
            "modelUri": f"gpt://{folder_id}/{model}",
            "completionOptions": {
                "temperature": 0.3,
                "maxTokens": 50
            },
            "messages": [
                {
                    "role": "user",
                    "text": "–ü—Ä–∏–≤–µ—Ç"
                }
            ]
        }
        
        try:
            response = requests.post(
                "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
                headers=headers,
                json=payload,
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ {model} - –†–ê–ë–û–¢–ê–ï–¢!")
            elif response.status_code == 403:
                print(f"   ‚ùå {model} - Permission denied")
            elif response.status_code == 404:
                print(f"   ‚ùå {model} - Model not found")
            else:
                print(f"   ‚ùå {model} - Error {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå {model} - Exception: {e}")
        
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ YandexGPT API")
    print("=" * 60)
    
    test_api_key_format()
    test_folder_id()
    test_different_auth_methods()
    print()
    test_different_models()
    
    print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 403 - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞")
    print("2. –ï—Å–ª–∏ Bearer —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ Api-Key –Ω–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ")
    print("3. –ï—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–±–æ—Ç–∞—é—â—É—é")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Yandex Cloud Console:")
    print("   - –ü—Ä–∞–≤–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    print("   - –†–æ–ª—å 'AI Language Model User'")
    print("   - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")

if __name__ == "__main__":
    main() 
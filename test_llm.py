#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã LLM —Å–µ—Ä–≤–∏—Å–∞ —Å YandexGPT
"""

import asyncio
import os
from dotenv import load_dotenv
from llm_service import LLMService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_llm_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ LLM —Å–µ—Ä–≤–∏—Å–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if not os.getenv('YANDEX_API_KEY'):
        print("‚ùå YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º Yandex Cloud API –∫–ª—é—á–æ–º")
        return
    
    if not os.getenv('YANDEX_FOLDER_ID'):
        print("‚ùå YANDEX_FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à Yandex Cloud Folder ID –≤ —Ñ–∞–π–ª .env")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        llm_service = LLMService()
        print("‚úÖ LLM —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: YandexGPT (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–∞–º–∏
        test_text = """
        –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –Ø —Ö–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ —Ç–æ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤—á–µ—Ä–∞.
        –ú—ã —Å –¥—Ä—É–∑—å—è–º–∏ –ø–æ—à–ª–∏ –≤ –∫–∏–Ω–æ –∏ —Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã".
        –§–∏–ª—å–º –±—ã–ª –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –¥–ª–∏–Ω–Ω—ã–π. –ü–æ—Å–ª–µ –∫–∏–Ω–æ –º—ã –ø–æ—à–ª–∏ –≤ –∫–∞—Ñ–µ –≥–¥–µ –µ–ª–∏ –ø–∏—Ü—Ü—É –∏ –ø–∏–ª–∏ –∫–æ–ª—É.
        –ë—ã–ª–æ –≤–µ—Å–µ–ª–æ –∏ –º—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è —Å–Ω–æ–≤–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.
        """
        
        print("\nüìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
        print(test_text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_estimate = llm_service.get_cost_estimate(len(test_text))
        print(f"\nüí∞ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:")
        print(f"   –¢–æ–∫–µ–Ω–æ–≤: ~{cost_estimate['estimated_tokens']}")
        print(f"   YandexGPT Lite: ${cost_estimate['costs']['yandexgpt_lite']:.4f}")
        print(f"   OpenAI GPT-4: ${cost_estimate['costs']['openai_gpt4']:.4f}")
        print(f"   –≠–∫–æ–Ω–æ–º–∏—è: ${cost_estimate['savings_vs_gpt4']:.4f} (–≤ {cost_estimate['costs']['openai_gpt4']/cost_estimate['costs']['yandexgpt_lite']:.0f} —Ä–∞–∑ –¥–µ—à–µ–≤–ª–µ!)")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏...")
        result = await llm_service.check_grammar(test_text)
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:")
        print(result)
        
        # –¢–µ—Å—Ç 2: –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        result = await llm_service.improve_text(test_text)
        print("‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è:")
        print(result)
        
        # –¢–µ—Å—Ç 3: –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        result = await llm_service.shorten_text(test_text)
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è:")
        print(result)
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üí° YandexGPT –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ LLM —Å–µ—Ä–≤–∏—Å–∞ —Å YandexGPT...")
    asyncio.run(test_llm_service()) 
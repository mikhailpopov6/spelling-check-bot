import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN
from llm_service import LLMService
from user_manager import UserManager
from telegram_utils import TelegramFormatter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TextBot:
    def __init__(self):
        self.llm_service = LLMService()
        self.user_manager = UserManager()
        self.user_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        self.user_manager.get_or_create_user(
            user.id, 
            user.username, 
            user.first_name
        )
        
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
‚úÖ –£–ª—É—á—à–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞  
‚úÖ –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–º—ã—Å–ª–∞
‚úÖ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏

–ö–æ–º–∞–Ω–¥—ã:
/check [—Ç–µ–∫—Å—Ç] - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å
/improve [—Ç–µ–∫—Å—Ç] - —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç
/shorten [—Ç–µ–∫—Å—Ç] - —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç (en/uz/am/ru)
/help - —Å–ø—Ä–∞–≤–∫–∞

üí° –ö –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å nodot –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
        """
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", callback_data="check_grammar")],
            [InlineKeyboardButton("‚ú® –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="improve_text")],
            [InlineKeyboardButton("üìÑ –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="shorten_text")],
            [InlineKeyboardButton("üåê –ü–µ—Ä–µ–≤–æ–¥", callback_data="translate")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**

1Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å** - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞

2Ô∏è‚É£ **–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç** - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∞–µ—Ç —Å—Ç–∏–ª—å, –¥–µ–ª–∞—è —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º

3Ô∏è‚É£ **–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç** - —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å

4Ô∏è‚É£ **–ü–µ—Ä–µ–≤–æ–¥** - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —É–∑–±–µ–∫—Å–∫–∏–π, –∞—Ä–º—è–Ω—Å–∫–∏–π —è–∑—ã–∫–∏ –∏ —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/check [—Ç–µ–∫—Å—Ç] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å
/check [—Ç–µ–∫—Å—Ç] nodot - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å –±–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤
/improve [—Ç–µ–∫—Å—Ç] - –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç  
/improve [—Ç–µ–∫—Å—Ç] nodot - –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤
/shorten [—Ç–µ–∫—Å—Ç] - –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç
/shorten [—Ç–µ–∫—Å—Ç] nodot - –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç (en/uz/am)
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] nodot - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∞–±–∑–∞—Ü–∞–º–∏
‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏—Ä–µ

**–ü—Ä–∏–º–µ—Ä—ã:**
/check –ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞
/check –ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞ nodot
/improve –¢–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–∞–º–∏
/improve –¢–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–∞–º–∏ nodot
/shorten –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å
/shorten –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å nodot
/translate en –ü—Ä–∏–≤–µ—Ç –º–∏—Ä
/translate uz –ö–∞–∫ –¥–µ–ª–∞
/translate am –î–æ–±—Ä—ã–π –¥–µ–Ω—å

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 4000 —Å–∏–º–≤–æ–ª–æ–≤
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def check_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message.forward_from or update.message.forward_from_chat:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ
            text = update.message.text or ""
            if text.startswith('/check'):
                text = text[7:].strip()  # –£–±–∏—Ä–∞–µ–º '/check '
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if context.args:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                full_text = update.message.text
                command_length = len('/check')
                text = full_text[command_length:].strip()
            else:
                text = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä nodot
        no_dot = 'nodot' in text.lower()
        if no_dot:
            # –£–±–∏—Ä–∞–µ–º nodot –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = text.replace('nodot', '').replace('NODOT', '').strip()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if text:
            text = text.replace('\r\n', '\n').replace('\r', '\n')
            await self.process_check_text(update, text, no_dot)
        else:
            self.user_states[user_id] = "waiting_for_text_check"
            await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:")
    
    async def improve_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /improve"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message.forward_from or update.message.forward_from_chat:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ
            text = update.message.text or ""
            if text.startswith('/improve'):
                text = text[10:].strip()  # –£–±–∏—Ä–∞–µ–º '/improve '
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if context.args:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                full_text = update.message.text
                command_length = len('/improve')
                text = full_text[command_length:].strip()
            else:
                text = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä nodot
        no_dot = 'nodot' in text.lower()
        if no_dot:
            # –£–±–∏—Ä–∞–µ–º nodot –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = text.replace('nodot', '').replace('NODOT', '').strip()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if text:
            text = text.replace('\r\n', '\n').replace('\r', '\n')
            await self.process_improve_text(update, text, no_dot)
        else:
            self.user_states[user_id] = "waiting_for_text_improve"
            await update.message.reply_text("‚ú® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
    
    async def shorten_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shorten"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message.forward_from or update.message.forward_from_chat:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ
            text = update.message.text or ""
            if text.startswith('/shorten'):
                text = text[9:].strip()  # –£–±–∏—Ä–∞–µ–º '/shorten '
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if context.args:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                full_text = update.message.text
                command_length = len('/shorten')
                text = full_text[command_length:].strip()
            else:
                text = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä nodot
        no_dot = 'nodot' in text.lower()
        if no_dot:
            # –£–±–∏—Ä–∞–µ–º nodot –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = text.replace('nodot', '').replace('NODOT', '').strip()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if text:
            text = text.replace('\r\n', '\n').replace('\r', '\n')
            await self.process_shorten_text(update, text, no_dot)
        else:
            self.user_states[user_id] = "waiting_for_text_shorten"
            await update.message.reply_text("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è:")
    
    async def translate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message.forward_from or update.message.forward_from_chat:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ
            full_text = update.message.text or ""
            if full_text.startswith('/translate'):
                # –£–±–∏—Ä–∞–µ–º '/translate ' –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                args_text = full_text[11:].strip()
                args = args_text.split()
                if len(args) >= 2:
                    target_language = args[0].lower()
                    text = ' '.join(args[1:])
                else:
                    text = ""
                    target_language = ""
            else:
                text = ""
                target_language = ""
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if len(context.args) >= 2:
                # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - —è–∑—ã–∫, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —Ç–µ–∫—Å—Ç
                target_language = context.args[0].lower()
                text = ' '.join(context.args[1:])
            else:
                text = ""
                target_language = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä nodot
        no_dot = 'nodot' in text.lower()
        if no_dot:
            # –£–±–∏—Ä–∞–µ–º nodot –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = text.replace('nodot', '').replace('NODOT', '').strip()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if text and target_language:
            text = text.replace('\r\n', '\n').replace('\r', '\n')
            await self.process_translate_text(update, text, target_language, no_dot)
        else:
            self.user_states[user_id] = "waiting_for_text_translate"
            await update.message.reply_text("üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫: en/uz/am/ru):")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            user_id = update.effective_user.id
            
            if not self.user_manager.is_admin(user_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            stats = self.user_manager.get_stats()
            
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}

üìà **–ó–∞–ø—Ä–æ—Å—ã:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_requests', 0)}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats.get('week_requests', 0)}

üèÜ **–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
"""
            
            top_users = stats.get('top_users', [])
            if top_users:
                for i, user in enumerate(top_users, 1):
                    username = user.get('username', '–ë–µ–∑ username')
                    first_name = user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    total_requests = user.get('requests', {}).get('total', 0)
                    stats_text += f"{i}. @{username} ({first_name}) - {total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            else:
                stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö\n"
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ stats: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if query.data.startswith("forward_"):
            action = query.data.split("_")[1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            if user_id in self.user_states and self.user_states[user_id].startswith("forwarded_text:"):
                text = self.user_states[user_id].replace("forwarded_text:", "")
                
                if action == "check":
                    await self.process_check_text(update, text, False)
                elif action == "improve":
                    await self.process_improve_text(update, text, False)
                elif action == "shorten":
                    await self.process_shorten_text(update, text, False)
                elif action == "translate":
                    await query.edit_message_text("üåê –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:\n‚Ä¢ en - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n‚Ä¢ uz - —É–∑–±–µ–∫—Å–∫–∏–π\n‚Ä¢ am - –∞—Ä–º—è–Ω—Å–∫–∏–π\n‚Ä¢ ru - —Ä—É—Å—Å–∫–∏–π (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞)\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/translate en –ü—Ä–∏–≤–µ—Ç –º–∏—Ä\n/translate ru Hello world")
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if user_id in self.user_states:
                    del self.user_states[user_id]
                return
        
        # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if query.data == "check_grammar":
            self.user_states[user_id] = "waiting_for_text_check"
            await query.edit_message_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:")
        
        elif query.data == "improve_text":
            self.user_states[user_id] = "waiting_for_text_improve"
            await query.edit_message_text("‚ú® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
        
        elif query.data == "shorten_text":
            self.user_states[user_id] = "waiting_for_text_shorten"
            await query.edit_message_text("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è:")
        
        elif query.data == "translate":
            await query.edit_message_text("üåê –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:\n‚Ä¢ en - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n‚Ä¢ uz - —É–∑–±–µ–∫—Å–∫–∏–π\n‚Ä¢ am - –∞—Ä–º—è–Ω—Å–∫–∏–π\n‚Ä¢ ru - —Ä—É—Å—Å–∫–∏–π (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞)\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/translate en –ü—Ä–∏–≤–µ—Ç –º–∏—Ä\n/translate ru Hello world\n/translate uz –ö–∞–∫ –¥–µ–ª–∞\n/translate ru Salom dunyo")
        
        elif query.data == "help":
            help_text = """
üìö **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**

1Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å** - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞

2Ô∏è‚É£ **–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç** - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∞–µ—Ç —Å—Ç–∏–ª—å, –¥–µ–ª–∞—è —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º

3Ô∏è‚É£ **–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç** - —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å

4Ô∏è‚É£ **–ü–µ—Ä–µ–≤–æ–¥** - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —É–∑–±–µ–∫—Å–∫–∏–π, –∞—Ä–º—è–Ω—Å–∫–∏–π —è–∑—ã–∫–∏ –∏ —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/check [—Ç–µ–∫—Å—Ç] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å
/check [—Ç–µ–∫—Å—Ç] nodot - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å –±–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤
/improve [—Ç–µ–∫—Å—Ç] - –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç  
/improve [—Ç–µ–∫—Å—Ç] nodot - –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤
/shorten [—Ç–µ–∫—Å—Ç] - –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç
/shorten [—Ç–µ–∫—Å—Ç] nodot - –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç (en/uz/am/ru)
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] nodot - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

**–ü—Ä–∏–º–µ—Ä—ã:**
/check –ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞
/check –ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞ nodot
/improve –¢–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–∞–º–∏
/improve –¢–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–∞–º–∏ nodot
/shorten –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å
/shorten –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å nodot
/translate en –ü—Ä–∏–≤–µ—Ç –º–∏—Ä
/translate ru Hello world
/translate uz –ö–∞–∫ –¥–µ–ª–∞
/translate ru Salom dunyo

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 4000 —Å–∏–º–≤–æ–ª–æ–≤
            """
            await query.edit_message_text(help_text, parse_mode='Markdown')
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message = update.message
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text, entities = TelegramFormatter.extract_text_and_entities(message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if text and '\n' in text:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            text = text.replace('\r\n', '\n').replace('\r', '\n')
        
        if user_id not in self.user_states:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.start(update, context)
            return
        
        state = self.user_states[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
        
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è LLM
            clean_text = TelegramFormatter.clean_formatting_for_llm(text)
            
            if state == "waiting_for_text_check":
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                self.user_manager.record_request(user_id, "check_grammar")
                result = await self.llm_service.check_grammar(clean_text)
                await self.send_result_message(update, result, "check", processing_msg)
            
            elif state == "waiting_for_text_improve":
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                self.user_manager.record_request(user_id, "improve_text")
                result = await self.llm_service.improve_text(clean_text)
                await self.send_result_message(update, result, "improve", processing_msg)
            
            elif state == "waiting_for_text_shorten":
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                self.user_manager.record_request(user_id, "shorten_text")
                result = await self.llm_service.shorten_text(clean_text)
                await self.send_result_message(update, result, "shorten", processing_msg)
            
            elif state == "waiting_for_text_translate":
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                self.user_manager.record_request(user_id, "translate_text")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                await processing_msg.edit_text("üåê –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:\n‚Ä¢ en - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n‚Ä¢ uz - —É–∑–±–µ–∫—Å–∫–∏–π\n‚Ä¢ am - –∞—Ä–º—è–Ω—Å–∫–∏–π\n‚Ä¢ ru - —Ä—É—Å—Å–∫–∏–π (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞)\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/translate en –ü—Ä–∏–≤–µ—Ç –º–∏—Ä\n/translate ru Hello world")
        
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                del self.user_states[user_id]
    
    async def send_result_message(self, update: Update, result: str, operation: str, processing_msg=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            if processing_msg:
                await processing_msg.delete()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            parts = TelegramFormatter.split_long_message(result)
            
            if len(parts) == 1:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(result, parse_mode='Markdown')
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π
                for i, part in enumerate(parts, 1):
                    if i == 1:
                        await update.message.reply_text(f"üìÑ **–ß–∞—Å—Ç—å {i}/{len(parts)}:**\n\n{part}", parse_mode='Markdown')
                    else:
                        await update.message.reply_text(f"üìÑ **–ß–∞—Å—Ç—å {i}/{len(parts)}:**\n\n{part}", parse_mode='Markdown')
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")
    
    async def handle_forwarded_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message = update.message
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text, entities = TelegramFormatter.extract_text_and_entities(message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if text and '\n' in text:
            text = text.replace('\r\n', '\n').replace('\r', '\n')
        
        if not text:
            await update.message.reply_text("‚ùå –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", callback_data=f"forward_check:{text[:50]}...")],
            [InlineKeyboardButton("‚ú® –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"forward_improve:{text[:50]}...")],
            [InlineKeyboardButton("üìÑ –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"forward_shorten:{text[:50]}...")],
            [InlineKeyboardButton("üåê –ü–µ—Ä–µ–≤–æ–¥", callback_data=f"forward_translate:{text[:50]}...")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üì§ **–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n\n{text[:200]}{'...' if len(text) > 200 else ''}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.user_states[user_id] = f"forwarded_text:{text}"
    
    async def process_check_text(self, update: Update, text: str, no_dot: bool = False):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        self.user_manager.record_request(user_id, "check_grammar")
        
        processing_msg = await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å...")
        try:
            result = await self.llm_service.check_grammar(text, no_dot)
            await self.send_result_message(update, result, "check", processing_msg)
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏: {e}")
    
    async def process_improve_text(self, update: Update, text: str, no_dot: bool = False):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        self.user_manager.record_request(user_id, "improve_text")
        
        processing_msg = await update.message.reply_text("üîÑ –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç...")
        try:
            result = await self.llm_service.improve_text(text, no_dot)
            await self.send_result_message(update, result, "improve", processing_msg)
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
    
    async def process_shorten_text(self, update: Update, text: str, no_dot: bool = False):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        self.user_manager.record_request(user_id, "shorten_text")
        
        processing_msg = await update.message.reply_text("üîÑ –°–æ–∫—Ä–∞—â–∞—é —Ç–µ–∫—Å—Ç...")
        try:
            result = await self.llm_service.shorten_text(text, no_dot)
            await self.send_result_message(update, result, "shorten", processing_msg)
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
    
    async def process_translate_text(self, update: Update, text: str, target_language: str, no_dot: bool = False):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
        user_id = update.effective_user.id
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        self.user_manager.record_request(user_id, "translate_text")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        language_names = {
            "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "uz": "—É–∑–±–µ–∫—Å–∫–∏–π", 
            "am": "–∞—Ä–º—è–Ω—Å–∫–∏–π",
            "ru": "—Ä—É—Å—Å–∫–∏–π"
        }
        language_name = language_names.get(target_language, target_language)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        if target_language == "ru":
            direction = "–Ω–∞ —Ä—É—Å—Å–∫–∏–π"
            processing_text = "üåê –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π..."
            result_text = f"üåê **–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:**"
        else:
            direction = f"–Ω–∞ {language_name}"
            processing_text = f"üåê –ü–µ—Ä–µ–≤–æ–∂—É {direction}..."
            result_text = f"üåê **–ü–µ—Ä–µ–≤–æ–¥ {direction}:**"
        
        processing_msg = await update.message.reply_text(processing_text)
        try:
            result = await self.llm_service.translate_text(text, target_language, no_dot)
            await processing_msg.edit_text(f"{result_text}\n\n{result}", parse_mode='Markdown')
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {e}")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = TextBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("check", bot.check_command))
    application.add_handler(CommandHandler("improve", bot.improve_command))
    application.add_handler(CommandHandler("shorten", bot.shorten_command))
    application.add_handler(CommandHandler("translate", bot.translate_command))
    application.add_handler(CommandHandler("stats", bot.stats_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.FORWARDED & filters.TEXT, bot.handle_forwarded_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 
#!/bin/bash

echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 164.90.237.57"
echo "=================================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É..."
if ! ping -c 1 164.90.237.57 &> /dev/null; then
    echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
    exit 1
fi

echo "‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
echo "üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞..."

ssh root@164.90.237.57 << 'EOF'

echo "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–æ—Ç–∞
cd /root/spelling-check-bot

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞..."
sudo systemctl stop spelling-bot.service

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
echo "üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏..."
cp bot.py bot.py.backup.$(date +%Y%m%d_%H%M%S)
cp user_manager.py user_manager.py.backup.$(date +%Y%m%d_%H%M%S)

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª telegram_utils.py
echo "üìù –°–æ–∑–¥–∞–µ–º telegram_utils.py..."
cat > telegram_utils.py << 'TELEGRAM_UTILS'
import re
from typing import Tuple, Dict, Any
from telegram import Update, MessageEntity

class TelegramFormatter:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Telegram —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def extract_text_and_entities(message) -> Tuple[str, list]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = message.text or ""
        entities = message.entities or []
        return text, entities
    
    @staticmethod
    def preserve_formatting(text: str, entities: list) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –≤ —Ç–µ–∫—Å—Ç–µ"""
        if not entities:
            return text
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        sorted_entities = sorted(entities, key=lambda x: x.offset)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatting_map = {}
        
        for entity in sorted_entities:
            start = entity.offset
            end = entity.offset + entity.length
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if entity.type == MessageEntity.BOLD:
                formatting_map[start] = "**"
                formatting_map[end] = "**"
            elif entity.type == MessageEntity.ITALIC:
                formatting_map[start] = "*"
                formatting_map[end] = "*"
            elif entity.type == MessageEntity.CODE:
                formatting_map[start] = "`"
                formatting_map[end] = "`"
            elif entity.type == MessageEntity.PRE:
                formatting_map[start] = "```\n"
                formatting_map[end] = "\n```"
            elif entity.type == MessageEntity.URL:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–∞–∫ –µ—Å—Ç—å
                continue
            elif entity.type == MessageEntity.TEXT_LINK:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
                url = entity.url
                link_text = text[start:end]
                formatting_map[start] = f"[{link_text}]({url})"
                formatting_map[end] = ""
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        result = ""
        last_pos = 0
        
        for pos in sorted(formatting_map.keys()):
            result += text[last_pos:pos]
            result += formatting_map[pos]
            last_pos = pos
        
        result += text[last_pos:]
        
        return result
    
    @staticmethod
    def clean_formatting_for_llm(text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM"""
        # –£–±–∏—Ä–∞–µ–º Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # –ñ–∏—Ä–Ω—ã–π
        text = re.sub(r'\*(.*?)\*', r'\1', text)      # –ö—É—Ä—Å–∏–≤
        text = re.sub(r'`(.*?)`', r'\1', text)        # –ö–æ–¥
        text = re.sub(r'```(.*?)```', r'\1', text, flags=re.DOTALL)  # –ë–ª–æ–∫ –∫–æ–¥–∞
        text = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', text)  # –°—Å—ã–ª–∫–∏
        
        return text.strip()
    
    @staticmethod
    def format_result_message(original_text: str, result_text: str, operation: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        operation_emoji = {
            "check": "‚úÖ",
            "improve": "‚ú®", 
            "shorten": "üìÑ",
            "translate": "üåê"
        }
        
        emoji = operation_emoji.get(operation, "üìù")
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(result_text) > 4000:
            return f"{emoji} **–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –û—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç—è–º–∏:**"
        
        return f"{emoji} **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n\n{result_text}"
    
    @staticmethod
    def split_long_message(text: str, max_length: int = 4000) -> list:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(text) <= max_length:
            return [text]
        
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
        paragraphs = text.split('\n\n')
        
        for paragraph in paragraphs:
            if len(current_part) + len(paragraph) + 2 <= max_length:
                current_part += (paragraph + '\n\n')
            else:
                if current_part:
                    parts.append(current_part.strip())
                current_part = paragraph + '\n\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        return parts
TELEGRAM_UTILS

echo "‚úÖ telegram_utils.py —Å–æ–∑–¥–∞–Ω"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞..."
sudo systemctl start spelling-bot.service

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
sudo systemctl status spelling-bot.service

echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo journalctl -u spelling-bot.service -f"

EOF

echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üì± –¢–µ–ø–µ—Ä—å –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:"
echo "   ‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
echo "   ‚úÖ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"
echo "   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram"
echo "   ‚úÖ –†–∞–∑–±–∏–≤–∫—É –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
echo "   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É /stats"

import requests
import json
import logging
from config import SYSTEM_PROMPTS, MAX_TEXT_LENGTH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class GigaChatLLMService:
    def __init__(self):
        self.base_url = "https://gigachat.devices.sberbank.ru/api/v1"
        self.access_token = None
        self._get_access_token()
    
    def _get_access_token(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ GigaChat"""
        try:
            # –î–ª—è GigaChat –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OAuth —Ç–æ–∫–µ–Ω
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ OAuth
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ç–æ–∫–µ–Ω –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
            self.access_token = "demo_token"
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º GigaChat")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat: {e}")
            self.access_token = None
    
    async def process_text(self, text: str, task_type: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é GigaChat –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ ('check_grammar', 'improve_text', 'shorten_text')
        
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text.strip():
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        
        if len(text) > MAX_TEXT_LENGTH:
            return f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        
        if task_type not in SYSTEM_PROMPTS:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏."
        
        # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞
        system_prompt = SYSTEM_PROMPTS[task_type]
        
        if task_type == "check_grammar":
            return self._demo_check_grammar(text)
        elif task_type == "improve_text":
            return self._demo_improve_text(text)
        elif task_type == "shorten_text":
            return self._demo_shorten_text(text)
        
        return "–î–µ–º–æ-—Ä–µ–∂–∏–º: —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    
    def _demo_check_grammar(self, text: str) -> str:
        """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ—Å—Ç—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        corrected = text.replace("—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤—á–µ—Ä–∞.", "—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤—á–µ—Ä–∞.")
        corrected = corrected.replace("–∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è", "–∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è")
        corrected = corrected.replace("–±—ã–ª –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –Ω–æ", "–±—ã–ª –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, –Ω–æ")
        corrected = corrected.replace("–≥–¥–µ –µ–ª–∏ –ø–∏—Ü—Ü—É –∏ –ø–∏–ª–∏ –∫–æ–ª—É.", "–≥–¥–µ –µ–ª–∏ –ø–∏—Ü—Ü—É –∏ –ø–∏–ª–∏ –∫–æ–ª—É.")
        corrected = corrected.replace("–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è", "–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è")
        corrected = corrected.replace("–≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.", "–≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
        
        return f"‚úÖ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{corrected}\n\nüí° *–î–µ–º–æ-—Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è*"
    
    def _demo_improve_text(self, text: str) -> str:
        """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        improved = text.replace("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?")
        improved = improved.replace("–Ø —Ö–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ", "–•–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º")
        improved = improved.replace("–ú—ã —Å –¥—Ä—É–∑—å—è–º–∏ –ø–æ—à–ª–∏", "–ú—ã —Å –¥—Ä—É–∑—å—è–º–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å")
        improved = improved.replace("–Ω–æ–≤—ã–π —Ñ–∏–ª—å–º –∫–æ—Ç–æ—Ä—ã–π", "–Ω–æ–≤—ã–π —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π")
        improved = improved.replace("–±—ã–ª –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –Ω–æ", "–æ–∫–∞–∑–∞–ª—Å—è –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º, –Ω–æ")
        improved = improved.replace("–ü–æ—Å–ª–µ –∫–∏–Ω–æ –º—ã –ø–æ—à–ª–∏", "–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º—ã –∑–∞—à–ª–∏")
        improved = improved.replace("–≥–¥–µ –µ–ª–∏ –ø–∏—Ü—Ü—É –∏ –ø–∏–ª–∏ –∫–æ–ª—É.", "–≥–¥–µ –∑–∞–∫–∞–∑–∞–ª–∏ –ø–∏—Ü—Ü—É –∏ –≤—ã–ø–∏–ª–∏ –∫–æ–ª—É.")
        improved = improved.replace("–ë—ã–ª–æ –≤–µ—Å–µ–ª–æ –∏ –º—ã", "–í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ –≤–µ—Å–µ–ª–æ, –∏ –º—ã")
        improved = improved.replace("–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è —Å–Ω–æ–≤–∞", "–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞")
        
        return f"‚ú® **–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{improved}\n\nüí° *–î–µ–º–æ-—Ä–µ–∂–∏–º: —É–ª—É—á—à–µ–Ω —Å—Ç–∏–ª—å –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å*"
    
    def _demo_shorten_text(self, text: str) -> str:
        """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        shortened = "–í—á–µ—Ä–∞ –º—ã —Å –¥—Ä—É–∑—å—è–º–∏ —Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º '–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã' –≤ –∫–∏–Ω–æ. –§–∏–ª—å–º –±—ã–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º, –Ω–æ –¥–ª–∏–Ω–Ω—ã–º. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –∑–∞—à–ª–∏ –≤ –∫–∞—Ñ–µ –Ω–∞ –ø–∏—Ü—Ü—É –∏ –∫–æ–ª—É. –ë—ã–ª–æ –≤–µ—Å–µ–ª–æ, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞."
        
        return f"üìÑ **–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{shortened}\n\nüí° *–î–µ–º–æ-—Ä–µ–∂–∏–º: —Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω –Ω–∞ ~40%*"
    
    async def check_grammar(self, text: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞"""
        return await self.process_text(text, "check_grammar")
    
    async def improve_text(self, text: str) -> str:
        """–£–ª—É—á—à–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        return await self.process_text(text, "improve_text")
    
    async def shorten_text(self, text: str) -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        return await self.process_text(text, "shorten_text")
    
    def get_cost_estimate(self, text_length: int) -> dict:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (GigaChat –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)"""
        estimated_tokens = text_length * 0.25
        
        costs = {
            "gigachat": 0.0,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
            "yandexgpt_lite": estimated_tokens * 0.001,
            "openai_gpt4": estimated_tokens * 0.03,
        }
        
        return {
            "estimated_tokens": int(estimated_tokens),
            "costs": costs,
            "savings_vs_gpt4": costs["openai_gpt4"]
        } 